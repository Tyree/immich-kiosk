package views

import (
	"fmt"
	"github.com/damongolding/immich-kiosk/immich"
	"github.com/damongolding/immich-kiosk/utils"
)

// frame is a template function that renders a basic frame for an image.
// It wraps the child content in a div with the class "frame--image".
templ frame() {
	<div class="frame--image">
		{ children... }
	</div>
}

// frameWithZoom is a template function that renders a frame with zoom effect for an image.
// It takes the refresh interval, image effect type, and the image asset as parameters.
// Depending on the image effect, it applies different CSS classes for zooming.
templ frameWithZoom(refresh int, imageEffect string, img immich.ImmichAsset) {
	switch imageEffect {
		case "smart-zoom":
			<div class={ "frame--image", "frame--image-zoom" , animationDuration(refresh), zoomInOrOut(imageEffect), smartZoom(img) }>
				{ children... }
			</div>
		default:
			<div class={ "frame--image", "frame--image-zoom" , animationDuration(refresh), zoomInOrOut(imageEffect) }>
				{ children... }
			</div>
	}
}

func panBackgroundSize(imageIsPortrait bool, effectAmount int) string {
	if imageIsPortrait {
		return fmt.Sprintf("%v%% auto", effectAmount)

	}
	return fmt.Sprintf("auto %v%% ", effectAmount)

}

css imageEffectPanning(refresh int, imageData string) {
	animation-name: { templ.SafeCSSProperty(randomPanDirection()) };
	animation-duration: { templ.SafeCSSProperty(fmt.Sprintf("%vs", refresh+(refresh/3))) };
	background-image: { templ.SafeCSSProperty(fmt.Sprintf("url(%s)", imageData)) };
}

func randomPanDirection() string {
	pick := utils.RandomItem([]string{"lb-tr", "br-tl", "tr-bl", "tl-br"})
	return "image-pan-" + pick
}

templ frameWithPan(refresh int, imageData ImageData) {
	<div
		data-imagewidth={ fmt.Sprintf("%v", imageData.ImmichImage.ExifInfo.ExifImageWidth) }
		data-imageheight={ fmt.Sprintf("%v", imageData.ImmichImage.ExifInfo.ExifImageHeight) }
		class={ "frame--image frame--image-pan", imageEffectPanning(refresh, imageData.ImageData) }
	></div>
}
