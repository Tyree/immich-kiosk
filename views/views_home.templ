package views

import (
	"bytes"
	"fmt"
	"github.com/damongolding/immich-kiosk/utils"
	"math"
	"net/url"
)

templ spinner() {
	<img
		class="kiosk--spinner"
		src="/assets/images/spinner.gif"
		alt="Loading spinner"
	/>
}

func crossFadeDurationCSS(crossFadeDuration float32) string {
	return fmt.Sprintf(`
	   <style>
            #kiosk.htmx-settling .htmx-added {
                animation-duration: %.1fs;
            }
        </style>
    `, crossFadeDuration)
}

templ kioskCrossFade(kioskVersion string, deviceID string, crossFadeDuration float32) {
	@templ.Raw(crossFadeDurationCSS(crossFadeDuration))
	<div
		id="kiosk"
		hx-post="/image"
		hx-include=".kiosk-history--entry"
		hx-trigger="load, kiosk-new-image"
		hx-swap={ fmt.Sprintf("beforeend settle:%.1fs", crossFadeDuration+1) }
		hx-on::after-request="kiosk.startPolling()"
		hx-on::after-settle="kiosk.cleanupFrames()"
		hx-headers={ fmt.Sprintf(`{"kiosk-version": "%s", "kiosk-device-id": "%s"}`, kioskVersion, deviceID) }
	>
		@spinner()
	</div>
}

func fadeDurationCSS(fadeDuration float32) string {
	return fmt.Sprintf(`
	   <style>
            #kiosk,#kiosk.htmx-swapping {
                transition: opacity %.1fs ease-out;
            }
        </style>
        `, fadeDuration)
}

templ kioskFade(kioskVersion string, deviceID string, fadeDuration float32) {
	@templ.Raw(fadeDurationCSS(fadeDuration / 2))
	<div
		id="kiosk"
		hx-post="/image"
		hx-include=".kiosk-history--entry"
		hx-trigger="load, kiosk-new-image"
		hx-swap={ fmt.Sprintf("innerHTML swap:%.1fs", fadeDuration/2) }
		hx-on::after-request="kiosk.startPolling()"
		hx-headers={ fmt.Sprintf(`{"kiosk-version": "%s", "kiosk-device-id": "%s"}`, kioskVersion, deviceID) }
	>
		@spinner()
	</div>
}

templ kioskNone(kioskVersion string, deviceID string) {
	<div
		id="kiosk"
		hx-post="/image"
		hx-include=".kiosk-history--entry"
		hx-trigger="load, kiosk-new-image"
		hx-swap="innerHTML"
		hx-on::after-request="kiosk.startPolling()"
		hx-headers={ fmt.Sprintf(`{"kiosk-version": "%s", "kiosk-device-id": "%s"}`, kioskVersion, deviceID) }
	>
		@spinner()
	</div>
}

css baseFontSize(fontSize int) {
	font-size: { fmt.Sprintf("%v%%", fontSize) };
}

func baseFontSizeMobile(fontSize int) string {
	return fmt.Sprintf(`
	   <style>
		@media screen and (max-width: 31.25rem) {
            html,
            body {
                font-size: %v%% !important;
            }
        }
		</style>`, fontSize-20)
}

func imageSmartZoomKeyframes(zoomAmount int) string {

	zoom := math.Max(float64(zoomAmount)/100.0, 1.0)
	return fmt.Sprintf(`
	<style>
	      @keyframes image-smart-zoom-in {
            from {
                transform: scale3d(1,1,1);
                transform-origin: center;
            }

            to {
                transform: scale3d(%.2f,%.2f,%.2f);
                transform-origin: inherit;
            }
        }

        @keyframes image-smart-zoom-out {
            from {
                transform: scale3d(%.2f,%.2f,%.2f);
                transform-origin: inherit;
            }

            to {
                transform: scale3d(1,1,1);
                transform-origin: center;
            }
        }
        </style>`, zoom, zoom, zoom, zoom, zoom, zoom)
}

func imageZoomKeyframes(zoomAmount int) string {

	zoom := math.Max(float64(zoomAmount)/100.0, 1.0)

	return fmt.Sprintf(`
	   <style>
			@keyframes image-zoom-in {
                from {
                    transform: scale3d(1,1,1);
                    transform-origin: center;
                }

                to {
                    transform: scale3d(%.2f,%.2f,%.2f);
                    transform-origin: center;
                }
            }

            @keyframes image-zoom-out {
                from {
                    transform: scale3d(%.2f,%.2f,%.2f);
                    transform-origin: center;
                }

                to {
                    transform: scale3d(1,1,1);
                    transform-origin: center;
                }
            }
		</style>`, zoom, zoom, zoom, zoom, zoom, zoom)
}

func customCss(css []byte) string {
	// Remove null bytes
	css = bytes.Replace(css, []byte{0}, []byte{}, -1)
	return fmt.Sprintf("<style>%s</style>", css)
}

css animationDuration(duration int) {
	animation-duration: { fmt.Sprintf("%ds", duration) };
}

func zoomInOrOut(zoomType string) string {
	return fmt.Sprintf("frame--image-%s-%s", zoomType, utils.RandomItem([]string{"in", "out"}))
}

templ kioskData(data any) {
	@templ.JSONScript("kiosk-data", data)
	<script>
	    const kioskData = JSON.parse(document.getElementById('kiosk-data').textContent);
		console.log(`\nImmich Kiosk version: %c${kioskData.version}`,  "color: white; font-weight:600; background-color:#1e83f7; padding:0.3rem 1rem; border-radius:4px;", "\n\n");
	</script>
}

templ offlineIcon() {
	<div id="offline">
		<svg
			width="48"
			height="48"
			viewBox="0 0 48 48"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<rect width="48" height="48"></rect>
			<path
				opacity="0.7"
				d="M11.5408 21.0109C14.7757 17.9078 19.164 16 24.0023 16C28.8407 16 33.229 17.9078 36.4639 21.0109C37.064 21.5828 38.0111 21.5641 38.583 20.9688C39.155 20.3734 39.1362 19.4219 38.5408 18.85C34.7714 15.2266 29.6471 13 24.0023 13C18.3576 13 13.2333 15.2266 9.45917 18.8453C8.86375 19.4219 8.845 20.3687 9.41697 20.9688C9.98895 21.5688 10.9407 21.5875 11.5361 21.0109H11.5408ZM24.0023 23.5C26.6653 23.5 29.0939 24.4891 30.9504 26.125C31.574 26.6734 32.521 26.6125 33.0696 25.9938C33.6181 25.375 33.5571 24.4234 32.9383 23.875C30.5566 21.775 27.4248 20.5 24.0023 20.5C20.5799 20.5 17.4481 21.775 15.0711 23.875C14.4475 24.4234 14.3913 25.3703 14.9398 25.9938C15.4884 26.6172 16.4354 26.6734 17.0589 26.125C18.9108 24.4891 21.3394 23.5 24.007 23.5H24.0023ZM27.0029 31C27.0029 30.2044 26.6867 29.4413 26.124 28.8787C25.5613 28.3161 24.7981 28 24.0023 28C23.2066 28 22.4434 28.3161 21.8807 28.8787C21.3179 29.4413 21.0018 30.2044 21.0018 31C21.0018 31.7956 21.3179 32.5587 21.8807 33.1213C22.4434 33.6839 23.2066 34 24.0023 34C24.7981 34 25.5613 33.6839 26.124 33.1213C26.6867 32.5587 27.0029 31.7956 27.0029 31Z"
				fill="white"
			></path>
			<path
				fill-rule="evenodd"
				clip-rule="evenodd"
				d="M47 24C47 36.7025 36.7025 47 24 47C11.2975 47 1 36.7025 1 24C1 11.2975 11.2975 1 24 1C36.7025 1 47 11.2975 47 24ZM44 24C44 35.0457 35.0457 44 24 44C19.048 44 14.5163 42.2003 11.0234 39.2192L39.2192 11.0234C42.2003 14.5163 44 19.048 44 24ZM8.89305 37.107L37.107 8.89304C33.5968 5.84497 29.0139 4 24 4C12.9543 4 4 12.9543 4 24C4 29.0139 5.84497 33.5968 8.89305 37.107Z"
				fill="#F3516B"
			></path>
		</svg>
	</div>
}

templ historyForm() {
	<form id="kiosk-history" hx-swap-oob="true">
		<input class="kiosk-history--entry" type="hidden" value=""/>
	</form>
}

templ paramForm(queries url.Values) {
	<form id="kiosk-params">
		for key, values := range queries {
			for _, value := range values {
				<input class="kiosk-param" type="hidden" name={ key } value={ value }/>
			}
		}
	</form>
}

templ clockHtmx(theme string) {
	<div
		id="clock"
		class={ fmt.Sprintf("clock--theme-%s", theme) }
		hx-get="/clock"
		hx-trigger="load, every 13s"
		hx-swap="innerHTML"
	></div>
}

templ weatherHtmx(theme string) {
	<div
		id="weather"
		class={ fmt.Sprintf("weather--theme-%s", theme) }
		hx-get="/weather"
		hx-include=".kiosk-param"
		hx-trigger="load, every 61s"
		hx-swap="innerHTML"
	></div>
}

templ progressBar() {
	<div class="progress">
		<div
			class="progress--bar"
		></div>
	</div>
}

templ sleepMode(sleepStart, sleepEnd string) {
	if sleepStart != "" && sleepEnd != "" {
		<form
			hx-get="/sleep"
			hx-trigger="load, every 13s"
			hx-target="#navigation-interaction-area"
		></form>
	}
}

templ refreshCheckForm(kioskVersion, reloadTimeStamp string, queries url.Values) {
	<form
		hx-post="/refresh/check"
		hx-trigger="every 7s"
		if len(queries) > 0 {
			hx-include=".kiosk-param, .kiosk-history--entry"
		}
		hx-headers={ fmt.Sprintf(`{"kiosk-version": "%s", "kiosk-reload-timestamp":"%s"}`, kioskVersion, reloadTimeStamp) }
	></form>
}

templ Home(viewData ViewData) {
	<!DOCTYPE html>
	<html lang="en" class={ baseFontSize(viewData.FontSize) }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="version" content={ viewData.KioskVersion }/>
			<meta name="mobile-web-app-capable" content="yes"/>
			<meta name="apple-mobile-web-app-capable" content="yes"/>
			<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"/>
			<meta name="apple-mobile-web-app-status-bar" content="black-translucent"/>
			<meta name="theme-color" content="black"/>
			<title>Immich Kiosk</title>
			<link rel="manifest" href="/assets/manifest.json"/>
			if viewData.Legacy {
				<link rel="stylesheet" href={ string(templ.URL(fmt.Sprintf("/assets/css/kiosk-legacy.%s.css", viewData.KioskVersion))) }/>
			} else {
				<link rel="stylesheet" href={ string(templ.URL(fmt.Sprintf("/assets/css/kiosk.%s.css", viewData.KioskVersion))) }/>
			}
			<link
				rel="apple-touch-icon"
				sizes="180x180"
				href="/assets/images/apple-touch-icon.png"
			/>
			<link
				rel="icon"
				type="image/png"
				sizes="32x32"
				href="/assets/images/favicon-32x32.png"
			/>
			<link
				rel="icon"
				type="image/png"
				sizes="16x16"
				href="/assets/images/favicon-16x16.png"
			/>
			if viewData.HideCursor {
				<style>
    				html, body{
    				    cursor: none;
    				}
				</style>
			}
			switch  viewData.ImageEffect {
				case "zoom":
					@templ.Raw(imageZoomKeyframes(viewData.ImageEffectAmount))
				case "smart-zoom":
					@templ.Raw(imageSmartZoomKeyframes(viewData.ImageEffectAmount))
			}
			@templ.Raw(baseFontSizeMobile(viewData.FontSize))
			if len(viewData.CustomCss) > 0 && viewData.CustomCSS {
				@templ.Raw(customCss(viewData.CustomCss))
			}
		</head>
		<body class={ fmt.Sprintf("layout-%s", viewData.Layout) }>
			switch viewData.Transition {
				case "cross-fade":
					@kioskCrossFade(viewData.KioskVersion, utils.GenerateUUID(), viewData.CrossFadeTransitionDuration)
				case "fade":
					@kioskFade(viewData.KioskVersion, utils.GenerateUUID(), viewData.FadeTransitionDuration)
				default:
					@kioskNone(viewData.KioskVersion, utils.GenerateUUID())
			}
			if viewData.ShowProgress {
				@progressBar()
			}
			if !viewData.DisableUi {
				<div id="clock-weather-container">
					<div>
						if (viewData.ShowTime || viewData.ShowDate) {
							@clockHtmx(viewData.Theme)
						}
					</div>
					<div>
						if viewData.Queries.Has("weather") {
							@weatherHtmx(viewData.Theme)
						}
					</div>
				</div>
			}
			@menu()
			@paramForm(viewData.Queries)
			@sleepMode(viewData.SleepStart, viewData.SleepEnd)
			@historyForm()
			@refreshCheckForm(viewData.KioskVersion, viewData.ReloadTimeStamp, viewData.Queries)
			@offlineIcon()
			@kioskData(map[string]any{
				"debug":              viewData.Kiosk.Debug,
				"debugVerbose":       viewData.Kiosk.DebugVerbose,
				"version":            viewData.KioskVersion,
				"params":             quriesToJson(viewData.Queries),
				"refresh":            viewData.Refresh,
				"disableScreensaver": viewData.DisableScreensaver,
			})
			if viewData.Legacy {
				<script src="https://cdn.jsdelivr.net/npm/whatwg-fetch/dist/fetch.umd.js"></script>
				<script src="https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.min.js"></script>
				<script src={ string(templ.URL(fmt.Sprintf("/assets/js/kiosk-legacy.%s.js", viewData.KioskVersion))) }></script>
			} else {
				<script src={ string(templ.URL(fmt.Sprintf("/assets/js/kiosk.%s.js", viewData.KioskVersion))) }></script>
			}
			if len(viewData.Queries) > 0 {
				<script>
				  const kioskQueires = document.body.querySelectorAll(".kiosk-param");
   		           document.body.addEventListener("htmx:configRequest", (event) => {
                    kioskQueires.forEach((q) => {
                      event.detail.parameters[q.name] = q.value;
                    });
                  });
                </script>
			}
		</body>
	</html>
}
